// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}


model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String
  profile           Profile?
  sessions          Session?

  @@map("users")
}

model Profile {
  id                String    @id @default(uuid())
  avatar_url        String  
  description       String
  position          String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String    @unique
  
  @@map("profile")
}

model Document {
  id                String     @id @default(uuid())
  collection_name   String     @unique
  chunk_size        Int        @default(1000)
  chunk_overlap     Int        @default(20)
  doc_link          String
  doc_name          String     @unique

   @@map("documents")
}

model Configuration {
  id                String       @id @default(uuid())
  prompt_template   String    
  max_tokens        Int         @default(1000)
  temperature       Float       @default(0.5)
  gpt_model         String      @default("gpt-4o-mini") 
  embedding_model   String      @default("text-embedding-3-small")

  @@map("configuration")
}

model GeneralDocConfig {
  id                      String       @id @default(uuid())
  relevant_doc_limit      Int         @default(3)
  relevant_doc_threshold  Float?       @default(0.5)
  batch_size              Int         @default(10)
  @@map("general_doc_config")
}

model Session {
  id                String      @id @default(uuid())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String      @unique
  status            SessionStatus @default(ACTIVE)
  auth_data         Json       
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  expiresAt         DateTime?   

  @@map("sessions")
}

model Environments {
  id          String   @id @default(uuid())
  name        String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("environments")
}

enum SessionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}
